# Test Automation Framework Development: Phase 4 - Reference Test Implementation

You're now in Phase 4. Your goal is to implement a complete reference test that showcases key framework features and serves as a model for future tests.

## Preparation

1. Review the framework from Phase 3:
   - Core utilities, test design, hooks, logging, reporting.

2. Ask the user:
   - A representative scenario to automate.
   - Test type (UI, API, integration).
   - Features to highlight.
   - Test data/env needs.
   - Preferred IDE for development.

## Reference Test Design

Demonstrate these elements in the reference test:

1. **Framework Initialization**
   - Setup/teardown, config, environment handling.

2. **Test Data**
   - Data generation, data-driven testing, cleanup.

3. **Execution Patterns**
   - Page/service layer usage, waits, error handling.

4. **Verifications**
   - Assertions, validation logic.

5. **Reporting**
   - Logging, screenshots/videos, result capture.

## Implementation Approach

1. **Best Practices**
   - Follow conventions, add detailed comments, use logging and error handling.

2. **Documentation**
   - Explain "why" and "how" for key techniques.

3. **Educational Structure**
   - Organize with headers, use clear variable names, include alternatives in comments.

## Deliverables

1. **Complete Test Code**
   - All files with setup, mock/test data, and execution instructions.

2. **Walkthrough**
   - Step-by-step guide with annotations and usage tips.

3. **Extension Snippets**
   - Examples for similar tests and reusable templates.

## IDE-Specific Execution

Tailor instructions to the userâ€™s IDE:

### Visual Studio / VS Code
- Test runner and launch config setup
- Debugging and extensions
- Test Explorer usage

### JetBrains IDEs (IntelliJ, PyCharm, etc.)
- Run/debug setup
- Gutter icons, shortcuts, test panel
- Coverage and results navigation

### Eclipse
- Test run/debug setup
- Breakpoints and results view

### Command Line
- Test runner usage
- Env variable setup
- Run specific tests/suites, debug flags

### CI/CD Integration
- Pipeline examples
- Report publishing
- Handling failures

## Results Interpretation

1. **Test Report**
   - Access and read reports, logs, failures, and artifacts.

2. **Troubleshooting**
   - Address sync, data, environment, and dependency issues.

## Guide for Future Tests

1. **Development Patterns**
   - Approaches for new tests, naming, reuse strategies.

2. **Test Suite Organization**
   - Structure, tagging, and parallel execution tips.

---

Start Phase 4 by asking the user for their IDE and a test scenario that represents the framework well. Explain this test will be the reference model for future automated tests.
